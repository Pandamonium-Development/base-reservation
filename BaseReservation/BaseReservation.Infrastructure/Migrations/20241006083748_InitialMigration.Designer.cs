// <auto-generated />
using System;
using BaseReservation.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BaseReservation.Infrastructure.Migrations
{
    [DbContext(typeof(BaseReservationContext))]
    [Migration("20241006083748_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Branch", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<short>("DistrictId")
                        .HasColumnType("smallint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("Telephone")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DistrictId" }, "IX_Branch_DistrictId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.BranchHoliday", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<byte>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<byte>("HolidayId")
                        .HasColumnType("tinyint");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BranchId" }, "IX_BranchHoliday_BranchId");

                    b.HasIndex(new[] { "HolidayId" }, "IX_BranchHoliday_HolidayId");

                    b.ToTable("BranchHoliday");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.BranchSchedule", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<byte>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<short>("ScheduleId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BranchId" }, "IX_BranchSchedule_BranchId");

                    b.HasIndex(new[] { "ScheduleId" }, "IX_BranchSchedule_ScheduleId");

                    b.ToTable("BranchSchedule");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.BranchScheduleBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("BranchScheduleId")
                        .HasColumnType("smallint");

                    b.Property<TimeOnly>("EndHour")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartHour")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BranchScheduleId" }, "IX_BranchScheduleBlock_BranchSchedule");

                    b.ToTable("BranchScheduleBlock");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Canton", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("ProvinceId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProvinceId" }, "IX_Canton_ProvinceId");

                    b.ToTable("Canton");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Category", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Contact", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("Telephone")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<byte>("VendorId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "VendorId" }, "IX_Contact_VendorId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Customer", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<short>("DistrictId")
                        .HasColumnType("smallint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("Telephone")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DistrictId" }, "IX_Customer_DistrictId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.District", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<byte>("CantonId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CantonId" }, "IX_District_CantonId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Gender", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Holiday", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<byte>("Day")
                        .HasColumnType("tinyint");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Holiday");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Inventory", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<byte>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeInventory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BranchId" }, "IX_Inventory_BranchId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.InventoryProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Assignable")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<short>("IdProducto")
                        .HasColumnType("smallint");

                    b.Property<short>("InventoryId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Maximum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Mininum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<short>("ProductId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("IdProducto");

                    b.HasIndex(new[] { "InventoryId" }, "IX_InventoryProduct_InventoryId");

                    b.HasIndex(new[] { "ProductId" }, "IX_InventoryProduct_ProductId");

                    b.ToTable("InventoryProduct");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.InventoryProductTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<long>("InventoryProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "InventoryProductId" }, "IX_InventoryProductTransaction_InventoryProductId");

                    b.ToTable("InventoryProductTransaction");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<short>("CustomerId")
                        .HasColumnType("smallint");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<short>("Number")
                        .HasColumnType("smallint");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<byte>("PaymentTypeId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("money");

                    b.Property<decimal>("Tax")
                        .HasColumnType("money");

                    b.Property<byte>("TaxId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BranchId" }, "IX_Invoice_BranchId");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Invoice_CustomerId");

                    b.HasIndex(new[] { "OrderId" }, "IX_Invoice_OrderId");

                    b.HasIndex(new[] { "PaymentTypeId" }, "IX_Invoice_PaymentTypeId");

                    b.HasIndex(new[] { "TaxId" }, "IX_Invoice_TaxId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.InvoiceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<byte>("LineNumber")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ProductId")
                        .HasColumnType("smallint");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ServiceId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("money");

                    b.Property<decimal>("Tax")
                        .HasColumnType("money");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "InvoiceId" }, "IX_InvoiceDetail_InvoiceId");

                    b.HasIndex(new[] { "ServiceId" }, "IX_InvoiceDetail_ServiceId");

                    b.ToTable("InvoiceDetail");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.InvoiceDetailProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("InvoiceDetailId")
                        .HasColumnType("bigint");

                    b.Property<short>("ProductId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(6, 2)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "InvoiceDetailId" }, "IX_InvoiceDetailProduct_InvoiceDetailId");

                    b.HasIndex(new[] { "ProductId" }, "IX_InvoiceDetailProduct_ProductId");

                    b.ToTable("InvoiceDetailProduct");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<short>("CustomerId")
                        .HasColumnType("smallint");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<short>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte>("PaymentTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<byte>("StatusOrderId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("money");

                    b.Property<decimal>("Tax")
                        .HasColumnType("money");

                    b.Property<byte>("TaxId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("StatusOrderId");

                    b.HasIndex(new[] { "BranchId" }, "IX_Order_BranchId");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Order_CustomerId");

                    b.HasIndex(new[] { "PaymentTypeId" }, "IX_Order_PaymentTypeId");

                    b.HasIndex(new[] { "ReservationId" }, "IX_Order_ReservationId");

                    b.HasIndex(new[] { "TaxId" }, "IX_Order_TaxId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.OrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("LineNumber")
                        .HasColumnType("tinyint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<short?>("ProductId")
                        .HasColumnType("smallint");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ServiceId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("money");

                    b.Property<decimal>("Tax")
                        .HasColumnType("money");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "OrderId" }, "IX_OrderDetail_OrderId");

                    b.HasIndex(new[] { "ServiceId" }, "IX_OrderDetail_ServiceId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.OrderDetailProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderDetailId")
                        .HasColumnType("bigint");

                    b.Property<short>("ProductId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(6, 2)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrderDetailId" }, "IX_OrderDetailProduct_OrderDetailId");

                    b.HasIndex(new[] { "ProductId" }, "IX_OrderDetailProduct_ProductId");

                    b.ToTable("OrderDetailProduct");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.PaymentType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PaymentType");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Product", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("CategoryId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SKU");

                    b.Property<byte>("UnitMeasureId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Producto_CategoryId");

                    b.HasIndex(new[] { "UnitMeasureId" }, "IX_Producto_UnitMeasureId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Province", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<byte>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<short>("CustomerId")
                        .HasColumnType("smallint");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("Hour")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValue("P")
                        .IsFixedLength();

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BranchId" }, "IX_Reservation_BranchId");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Reservation_CustomerId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.ReservationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short?>("ProductId")
                        .HasColumnType("smallint");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<byte?>("ServiceId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "ReservationId" }, "IX_ReservationDetail_ReservationId");

                    b.HasIndex(new[] { "ServiceId" }, "IX_ReservationDetail_ServiceId");

                    b.ToTable("ReservationDetail");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.ReservationQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Answer")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ReservationId" }, "IX_ReservationQuestion_ReservationId");

                    b.ToTable("ReservationQuestion");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Role", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Schedule", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("EndHour")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartHour")
                        .HasColumnType("time");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Service", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Observation")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<byte>("TypeServiceId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TypeServiceId" }, "IX_Service_TypeServiceId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.StatusOrder", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("StatusOrder");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Tax", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id");

                    b.ToTable("Tax");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.TokenMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<short>("UserId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_TokenMaster_UserId");

                    b.ToTable("TokenMaster");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.TypeService", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<TimeOnly>("BaseDuration")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TypeService");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.UnitMeasure", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nchar(5)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("UnitMeasure");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.User", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<short>("DistrictId")
                        .HasColumnType("smallint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<byte>("GenderId")
                        .HasColumnType("tinyint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte>("RoleId")
                        .HasColumnType("tinyint");

                    b.Property<int>("Telephone")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DistrictId" }, "IX_User_DistrictId");

                    b.HasIndex(new[] { "GenderId" }, "IX_User_GenderId");

                    b.HasIndex(new[] { "RoleId" }, "IX_User_RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.UserBranch", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<byte>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<short>("UserId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BranchId" }, "IX_UserBranch_BranchId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserBranch_UserId");

                    b.ToTable("UserBranch");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Vendor", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<short>("DistrictId")
                        .HasColumnType("smallint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FiscalNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("SocialReason")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Telephone")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DistrictId" }, "IX_Vendor_DistrictId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Branch", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.District", "DistrictIdNavigation")
                        .WithMany("Branches")
                        .HasForeignKey("DistrictId")
                        .IsRequired()
                        .HasConstraintName("FK_Branch_District");

                    b.Navigation("DistrictIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.BranchHoliday", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.Branch", "BranchIdNavigation")
                        .WithMany("BranchHolidays")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_BranchHoliday_Sucursal");

                    b.HasOne("BaseReservation.Infrastructure.Models.Holiday", "HolidayIdNavigation")
                        .WithMany("BranchHolidays")
                        .HasForeignKey("HolidayId")
                        .IsRequired()
                        .HasConstraintName("FK_BranchHoliday_Holiday");

                    b.Navigation("BranchIdNavigation");

                    b.Navigation("HolidayIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.BranchSchedule", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.Branch", "BranchIdNavigation")
                        .WithMany("BranchSchedules")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_BranchSchedule_Branch");

                    b.HasOne("BaseReservation.Infrastructure.Models.Schedule", "ScheduleIdNavigation")
                        .WithMany("BranchSchedules")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK_BranchSchedule_Schedule");

                    b.Navigation("BranchIdNavigation");

                    b.Navigation("ScheduleIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.BranchScheduleBlock", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.BranchSchedule", "BranchScheduleIdNavigation")
                        .WithMany("BranchScheduleBlocks")
                        .HasForeignKey("BranchScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK_BranchScheduleBlock_BranchSchedule");

                    b.Navigation("BranchScheduleIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Canton", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.Province", "ProvinceIdNavigation")
                        .WithMany("Cantons")
                        .HasForeignKey("ProvinceId")
                        .IsRequired()
                        .HasConstraintName("FK_Canton_Province");

                    b.Navigation("ProvinceIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Contact", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.Vendor", "VendorIdNavigation")
                        .WithMany("Contacts")
                        .HasForeignKey("VendorId")
                        .IsRequired()
                        .HasConstraintName("FK_Contact_Vendor");

                    b.Navigation("VendorIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Customer", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.District", "DistrictIdNavigation")
                        .WithMany("Customers")
                        .HasForeignKey("DistrictId")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_District");

                    b.Navigation("DistrictIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.District", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.Canton", "CantonIdNavigation")
                        .WithMany("Districts")
                        .HasForeignKey("CantonId")
                        .IsRequired()
                        .HasConstraintName("FK_District_Canton");

                    b.Navigation("CantonIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Inventory", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.Branch", "BranchIdNavigation")
                        .WithMany("Inventories")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_Inventory_Branch");

                    b.Navigation("BranchIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.InventoryProduct", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.Product", "ProductIdNavigation")
                        .WithMany("InventoryProducts")
                        .HasForeignKey("IdProducto")
                        .IsRequired()
                        .HasConstraintName("FK_InventoryProduct_Product");

                    b.HasOne("BaseReservation.Infrastructure.Models.Inventory", "InventoryIdNavigation")
                        .WithMany("InventoryProducts")
                        .HasForeignKey("InventoryId")
                        .IsRequired()
                        .HasConstraintName("FK_InventoryProduct_Inventory");

                    b.Navigation("InventoryIdNavigation");

                    b.Navigation("ProductIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.InventoryProductTransaction", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.InventoryProduct", "InventoryProductIdNavigation")
                        .WithMany("InventoryProductTransactions")
                        .HasForeignKey("InventoryProductId")
                        .IsRequired()
                        .HasConstraintName("FK_InventoryProductTransaction_InventoryProduct");

                    b.Navigation("InventoryProductIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Invoice", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.Branch", "BranchIdNavigation")
                        .WithMany("Invoices")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_Branch");

                    b.HasOne("BaseReservation.Infrastructure.Models.Customer", "CustomerIdNavigation")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_Customer");

                    b.HasOne("BaseReservation.Infrastructure.Models.Order", "OrderIdNavigation")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Invoice_Order");

                    b.HasOne("BaseReservation.Infrastructure.Models.PaymentType", "PaymentTypeIdNavigation")
                        .WithMany("Invoices")
                        .HasForeignKey("PaymentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_PaymentType");

                    b.HasOne("BaseReservation.Infrastructure.Models.Tax", "TaxIdNavigation")
                        .WithMany("Invoices")
                        .HasForeignKey("TaxId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_Tax");

                    b.Navigation("BranchIdNavigation");

                    b.Navigation("CustomerIdNavigation");

                    b.Navigation("OrderIdNavigation");

                    b.Navigation("PaymentTypeIdNavigation");

                    b.Navigation("TaxIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.InvoiceDetail", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.Invoice", "InvoiceIdNavigation")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceDetail_Invoice");

                    b.HasOne("BaseReservation.Infrastructure.Models.Product", "ProductIdNavigation")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_InvoiceDetail_Product");

                    b.HasOne("BaseReservation.Infrastructure.Models.Service", "ServiceIdNavigation")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_InvoiceDetail_Service");

                    b.Navigation("InvoiceIdNavigation");

                    b.Navigation("ProductIdNavigation");

                    b.Navigation("ServiceIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.InvoiceDetailProduct", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.InvoiceDetail", "InvoiceDetailIdNavigation")
                        .WithMany("InvoiceDetailProducts")
                        .HasForeignKey("InvoiceDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceDetailProduct_InvoiceDetail");

                    b.HasOne("BaseReservation.Infrastructure.Models.Product", "ProductIdNavigation")
                        .WithMany("InvoiceDetailProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceDetailProduct_Product");

                    b.Navigation("InvoiceDetailIdNavigation");

                    b.Navigation("ProductIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Order", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.Branch", "BranchIdNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Branch");

                    b.HasOne("BaseReservation.Infrastructure.Models.Customer", "CustomerIdNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Customer");

                    b.HasOne("BaseReservation.Infrastructure.Models.PaymentType", "PaymentTypeIdNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_PaymentType");

                    b.HasOne("BaseReservation.Infrastructure.Models.Reservation", "ReservationIdNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Reservation");

                    b.HasOne("BaseReservation.Infrastructure.Models.StatusOrder", "StatusOrderIdNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("StatusOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_StatusOrder");

                    b.HasOne("BaseReservation.Infrastructure.Models.Tax", "TaxIdNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("TaxId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Tax");

                    b.Navigation("BranchIdNavigation");

                    b.Navigation("CustomerIdNavigation");

                    b.Navigation("PaymentTypeIdNavigation");

                    b.Navigation("ReservationIdNavigation");

                    b.Navigation("StatusOrderIdNavigation");

                    b.Navigation("TaxIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.OrderDetail", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.Order", "OrderIdNavigation")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Order");

                    b.HasOne("BaseReservation.Infrastructure.Models.Product", "ProductIdNavigation")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderDetail_Product");

                    b.HasOne("BaseReservation.Infrastructure.Models.Service", "ServiceIdNavigation")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_OrderDetail_Service");

                    b.Navigation("OrderIdNavigation");

                    b.Navigation("ProductIdNavigation");

                    b.Navigation("ServiceIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.OrderDetailProduct", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.OrderDetail", "OrderDetailIdNavigation")
                        .WithMany("OrderDetailProducts")
                        .HasForeignKey("OrderDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetailProduct_OrderDetail");

                    b.HasOne("BaseReservation.Infrastructure.Models.Product", "ProductIdNavigation")
                        .WithMany("OrderDetailProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetailProduct_Product");

                    b.Navigation("OrderDetailIdNavigation");

                    b.Navigation("ProductIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Product", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.Category", "CategoryIdNavigation")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Category");

                    b.HasOne("BaseReservation.Infrastructure.Models.UnitMeasure", "UnitMeasureIdNavigation")
                        .WithMany("Products")
                        .HasForeignKey("UnitMeasureId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_UnitMeasure");

                    b.Navigation("CategoryIdNavigation");

                    b.Navigation("UnitMeasureIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Reservation", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.Branch", "BranchIdNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_Branch");

                    b.HasOne("BaseReservation.Infrastructure.Models.Customer", "CustomerIdNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_Customer");

                    b.Navigation("BranchIdNavigation");

                    b.Navigation("CustomerIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.ReservationDetail", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.Product", "ProductIdNavigation")
                        .WithMany("ReservationDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ReservationDetail_Product");

                    b.HasOne("BaseReservation.Infrastructure.Models.Reservation", "ReservationIdNavigation")
                        .WithMany("ReservationDetails")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservationDetail_Reservation");

                    b.HasOne("BaseReservation.Infrastructure.Models.Service", "ServiceIdNavigation")
                        .WithMany("ReservationDetails")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_ReservationDetail_Service");

                    b.Navigation("ProductIdNavigation");

                    b.Navigation("ReservationIdNavigation");

                    b.Navigation("ServiceIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.ReservationQuestion", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.Reservation", "ReservationIdNavigation")
                        .WithMany("ReservationQuestions")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservationQuestion_Reservation");

                    b.Navigation("ReservationIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Service", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.TypeService", "TypeServiceIdNavigation")
                        .WithMany("Services")
                        .HasForeignKey("TypeServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_Service_TypeService");

                    b.Navigation("TypeServiceIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.TokenMaster", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.User", "UserIdNavigation")
                        .WithMany("TokenMasters")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_TokenMaster_User");

                    b.Navigation("UserIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.User", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.District", "DistrictIdNavigation")
                        .WithMany("Users")
                        .HasForeignKey("DistrictId")
                        .IsRequired()
                        .HasConstraintName("FK_User_District");

                    b.HasOne("BaseReservation.Infrastructure.Models.Gender", "GenderIdNavigation")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Gender");

                    b.HasOne("BaseReservation.Infrastructure.Models.Role", "RoleIdNavigation")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("DistrictIdNavigation");

                    b.Navigation("GenderIdNavigation");

                    b.Navigation("RoleIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.UserBranch", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.Branch", "BranchIdNavigation")
                        .WithMany("UserBranches")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_UserBranch_Branch");

                    b.HasOne("BaseReservation.Infrastructure.Models.User", "UserIdNavigation")
                        .WithMany("UserBranches")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserBranch_User");

                    b.Navigation("BranchIdNavigation");

                    b.Navigation("UserIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Vendor", b =>
                {
                    b.HasOne("BaseReservation.Infrastructure.Models.District", "DistrictIdNavigation")
                        .WithMany("Vendors")
                        .HasForeignKey("DistrictId")
                        .IsRequired()
                        .HasConstraintName("FK_Vendor_District");

                    b.Navigation("DistrictIdNavigation");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Branch", b =>
                {
                    b.Navigation("BranchHolidays");

                    b.Navigation("BranchSchedules");

                    b.Navigation("Inventories");

                    b.Navigation("Invoices");

                    b.Navigation("Orders");

                    b.Navigation("Reservations");

                    b.Navigation("UserBranches");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.BranchSchedule", b =>
                {
                    b.Navigation("BranchScheduleBlocks");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Canton", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Customer", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Orders");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.District", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Customers");

                    b.Navigation("Users");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Holiday", b =>
                {
                    b.Navigation("BranchHolidays");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Inventory", b =>
                {
                    b.Navigation("InventoryProducts");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.InventoryProduct", b =>
                {
                    b.Navigation("InventoryProductTransactions");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.InvoiceDetail", b =>
                {
                    b.Navigation("InvoiceDetailProducts");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Order", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.OrderDetail", b =>
                {
                    b.Navigation("OrderDetailProducts");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.PaymentType", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Product", b =>
                {
                    b.Navigation("InventoryProducts");

                    b.Navigation("InvoiceDetailProducts");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("OrderDetailProducts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ReservationDetails");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Province", b =>
                {
                    b.Navigation("Cantons");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Reservation", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ReservationDetails");

                    b.Navigation("ReservationQuestions");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Schedule", b =>
                {
                    b.Navigation("BranchSchedules");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Service", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("ReservationDetails");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.StatusOrder", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Tax", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.TypeService", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.UnitMeasure", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.User", b =>
                {
                    b.Navigation("TokenMasters");

                    b.Navigation("UserBranches");
                });

            modelBuilder.Entity("BaseReservation.Infrastructure.Models.Vendor", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
